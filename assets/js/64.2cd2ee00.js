(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{487:function(e,a,_){"use strict";_.r(a);var v=_(4),o=Object(v.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"processes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#processes"}},[e._v("#")]),e._v(" Processes")]),e._v(" "),a("h2",{attrs:{id:"core-profile"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#core-profile"}},[e._v("#")]),e._v(" Core Profile")]),e._v(" "),a("p",[e._v("As the openEO project defines a lot of processes, we need to define a core profile (i.e. a subset) that needs to be implemented on each back-end.\nAll processes specifications can be found at "),a("a",{attrs:{href:"https://processes.openeo.org",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://processes.openeo.org"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"data-cubes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#data-cubes"}},[e._v("#")]),e._v(" Data Cubes")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("add_dimension")]),e._v(": Add a new dimension")]),e._v(" "),a("li",[a("code",[e._v("aggregate_spatial")]),e._v(": Zonal statistics for geometries")]),e._v(" "),a("li",[a("code",[e._v("aggregate_temporal")]),e._v(": Temporal aggregations")]),e._v(" "),a("li",[a("code",[e._v("aggregate_temporal_period")]),e._v(": Temporal aggregations based on calendar hierarchies")]),e._v(" "),a("li",[a("code",[e._v("apply")]),e._v(": Apply a process to each pixel")]),e._v(" "),a("li",[a("code",[e._v("apply_dimension")]),e._v(": Apply a process to pixels along a dimension")]),e._v(" "),a("li",[a("code",[e._v("apply_kernel")]),e._v(": Apply a spatial convolution with a kernel")]),e._v(" "),a("li",[a("code",[e._v("dimension_labels")]),e._v(": Get the dimension labels")]),e._v(" "),a("li",[a("code",[e._v("drop_dimension")]),e._v(": Remove a dimension")]),e._v(" "),a("li",[a("code",[e._v("filter_bands")]),e._v(": Filter the bands by names")]),e._v(" "),a("li",[a("code",[e._v("filter_bbox")]),e._v(": Spatial filter using a bounding box")]),e._v(" "),a("li",[a("code",[e._v("filter_spatial")]),e._v(": Spatial filter using geometries")]),e._v(" "),a("li",[a("code",[e._v("filter_temporal")]),e._v(": Temporal filter for temporal intervals")]),e._v(" "),a("li",[a("code",[e._v("load_collection")]),e._v(": Load a collection")]),e._v(" "),a("li",[a("code",[e._v("load_result")]),e._v(": Load batch job results - "),a("strong",[e._v("experimental")])]),e._v(" "),a("li",[a("code",[e._v("mask")]),e._v(": Apply a raster mask")]),e._v(" "),a("li",[a("code",[e._v("mask_polygon")]),e._v(": Apply a polygon mask")]),e._v(" "),a("li",[a("code",[e._v("merge_cubes")]),e._v(": Merge two data cubes")]),e._v(" "),a("li",[a("code",[e._v("reduce_dimension")]),e._v(": Reduce dimensions")]),e._v(" "),a("li",[a("code",[e._v("rename_dimension")]),e._v(": Rename a dimension")]),e._v(" "),a("li",[a("code",[e._v("rename_labels")]),e._v(": Rename dimension labels -> needed often for apply_dimension")]),e._v(" "),a("li",[a("code",[e._v("resample_cube_spatial")]),e._v(": Resample the spatial dimensions to match a target data cube")]),e._v(" "),a("li",[a("code",[e._v("resample_cube_temporal")]),e._v(": Resample temporal dimensions to match a target data cube - "),a("strong",[e._v("experimental")])]),e._v(" "),a("li",[a("code",[e._v("resample_spatial")]),e._v(": Resample and warp the spatial dimensions")]),e._v(" "),a("li",[a("code",[e._v("save_result")]),e._v(": Save processed data")])]),e._v(" "),a("h3",{attrs:{id:"arrays-reducers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arrays-reducers"}},[e._v("#")]),e._v(" Arrays / Reducers")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("array_append")]),e._v(": Append a value to an array - "),a("strong",[e._v("experimental")])]),e._v(" "),a("li",[a("code",[e._v("array_apply")]),e._v(": Apply a process to each array element")]),e._v(" "),a("li",[a("code",[e._v("array_concat")]),e._v(": Merge two arrays - "),a("strong",[e._v("experimental")])]),e._v(" "),a("li",[a("code",[e._v("array_contains")]),e._v(": Check whether the array contains a given value")]),e._v(" "),a("li",[a("code",[e._v("array_create")]),e._v(": Create an array - "),a("strong",[e._v("experimental")])]),e._v(" "),a("li",[a("code",[e._v("array_element")]),e._v(": Get an element from an array")]),e._v(" "),a("li",[a("code",[e._v("array_filter")]),e._v(": Filter an array based on a condition")]),e._v(" "),a("li",[a("code",[e._v("array_find")]),e._v(": Get the index for a value in an array")]),e._v(" "),a("li",[a("code",[e._v("array_interpolate_linear")]),e._v(": One-dimensional linear interpolation for arrays - "),a("strong",[e._v("experimental")])]),e._v(" "),a("li",[a("code",[e._v("array_labels")]),e._v(": Get the labels for an array")]),e._v(" "),a("li",[a("code",[e._v("array_modify")]),e._v(": Change the content of an array (insert, remove, update) - "),a("strong",[e._v("experimental")])]),e._v(" "),a("li",[a("code",[e._v("count")]),e._v(": Count the number of elements")]),e._v(" "),a("li",[a("code",[e._v("extrema")]),e._v(": Minimum and maximum values")]),e._v(" "),a("li",[a("code",[e._v("first")]),e._v(": First element")]),e._v(" "),a("li",[a("code",[e._v("last")]),e._v(": Last element")]),e._v(" "),a("li",[a("code",[e._v("max")]),e._v(": Maximum value")]),e._v(" "),a("li",[a("code",[e._v("mean")]),e._v(": Arithmetic mean (average)")]),e._v(" "),a("li",[a("code",[e._v("median")]),e._v(": Statistical median")]),e._v(" "),a("li",[a("code",[e._v("min")]),e._v(": Minimum value")]),e._v(" "),a("li",[a("code",[e._v("order")]),e._v(": Create a permutation")]),e._v(" "),a("li",[a("code",[e._v("product")]),e._v(": Compute the product by multiplying numbers")]),e._v(" "),a("li",[a("code",[e._v("rearrange")]),e._v(": Rearrange an array based on a permutation")]),e._v(" "),a("li",[a("code",[e._v("sort")]),e._v(": Sort data")]),e._v(" "),a("li",[a("code",[e._v("sum")]),e._v(": Compute the sum by adding up numbers")])]),e._v(" "),a("h3",{attrs:{id:"math"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#math"}},[e._v("#")]),e._v(" Math")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("absolute")]),e._v(": Absolute value")]),e._v(" "),a("li",[a("code",[e._v("add")]),e._v(": Addition of two numbers")]),e._v(" "),a("li",[a("code",[e._v("arccos")]),e._v(": Inverse cosine")]),e._v(" "),a("li",[a("code",[e._v("arcosh")]),e._v(": Inverse hyperbolic cosine")]),e._v(" "),a("li",[a("code",[e._v("arcsin")]),e._v(": Inverse sine")]),e._v(" "),a("li",[a("code",[e._v("arctan")]),e._v(": Inverse tangent")]),e._v(" "),a("li",[a("code",[e._v("arctan2")]),e._v(": Inverse tangent of two numbers")]),e._v(" "),a("li",[a("code",[e._v("arsinh")]),e._v(": Inverse hyperbolic sine")]),e._v(" "),a("li",[a("code",[e._v("artanh")]),e._v(": Inverse hyperbolic tangent")]),e._v(" "),a("li",[a("code",[e._v("ceil")]),e._v(": Round fractions up")]),e._v(" "),a("li",[a("code",[e._v("clip")]),e._v(": Clip a value between a minimum and a maximum")]),e._v(" "),a("li",[a("code",[e._v("constant")]),e._v(": Define a constant value -> pretty easy implementation")]),e._v(" "),a("li",[a("code",[e._v("cos")]),e._v(": Cosine")]),e._v(" "),a("li",[a("code",[e._v("cosh")]),e._v(": Hyperbolic cosine")]),e._v(" "),a("li",[a("code",[e._v("divide")]),e._v(": Division of two numbers")]),e._v(" "),a("li",[a("code",[e._v("e")]),e._v(": Euler's number")]),e._v(" "),a("li",[a("code",[e._v("exp")]),e._v(": Exponentiation to the base e")]),e._v(" "),a("li",[a("code",[e._v("floor")]),e._v(": Round fractions down")]),e._v(" "),a("li",[a("code",[e._v("int")]),e._v(": Integer part of a number")]),e._v(" "),a("li",[a("code",[e._v("linear_scale_range")]),e._v(": Linear transformation between two ranges")]),e._v(" "),a("li",[a("code",[e._v("ln")]),e._v(": Natural logarithm")]),e._v(" "),a("li",[a("code",[e._v("log")]),e._v(": Logarithm to a base")]),e._v(" "),a("li",[a("code",[e._v("mod")]),e._v(": Modulo")]),e._v(" "),a("li",[a("code",[e._v("multiply")]),e._v(": Multiplication of two numbers")]),e._v(" "),a("li",[a("code",[e._v("nan")]),e._v(" - Not a Number - "),a("strong",[e._v("experimental")])]),e._v(" "),a("li",[a("code",[e._v("pi")]),e._v(": Pi")]),e._v(" "),a("li",[a("code",[e._v("power")]),e._v(": Exponentiation")]),e._v(" "),a("li",[a("code",[e._v("round")]),e._v(": Round to a specified precision")]),e._v(" "),a("li",[a("code",[e._v("sgn")]),e._v(": Signum")]),e._v(" "),a("li",[a("code",[e._v("sin")]),e._v(": Sine")]),e._v(" "),a("li",[a("code",[e._v("sinh")]),e._v(": Hyperbolic sine")]),e._v(" "),a("li",[a("code",[e._v("sqrt")]),e._v(": Square root")]),e._v(" "),a("li",[a("code",[e._v("subtract")]),e._v(": Subtraction of two numbers")]),e._v(" "),a("li",[a("code",[e._v("tan")]),e._v(": Tangent")]),e._v(" "),a("li",[a("code",[e._v("tanh")]),e._v(": Hyperbolic tangent")])]),e._v(" "),a("h3",{attrs:{id:"statistics-indices"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#statistics-indices"}},[e._v("#")]),e._v(" Statistics / Indices")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("ndvi")]),e._v(": Normalized Difference Vegetation Index")]),e._v(" "),a("li",[a("code",[e._v("normalized_difference")]),e._v(": Normalized difference")]),e._v(" "),a("li",[a("code",[e._v("quantiles")]),e._v(": Quantiles")]),e._v(" "),a("li",[a("code",[e._v("sd")]),e._v(": Standard deviation")]),e._v(" "),a("li",[a("code",[e._v("variance")]),e._v(": Variance")])]),e._v(" "),a("h3",{attrs:{id:"logic"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#logic"}},[e._v("#")]),e._v(" Logic")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("and")]),e._v(": Logical AND")]),e._v(" "),a("li",[a("code",[e._v("all")]),e._v(": Are all of the values true?")]),e._v(" "),a("li",[a("code",[e._v("any")]),e._v(": Is at least one value true?")]),e._v(" "),a("li",[a("code",[e._v("between")]),e._v(": Between comparison")]),e._v(" "),a("li",[a("code",[e._v("eq")]),e._v(": Equal to comparison")]),e._v(" "),a("li",[a("code",[e._v("gt")]),e._v(": Greater than comparison")]),e._v(" "),a("li",[a("code",[e._v("gte")]),e._v(": Greater than or equal to comparison")]),e._v(" "),a("li",[a("code",[e._v("if")]),e._v(": If-Then-Else conditional")]),e._v(" "),a("li",[a("code",[e._v("is_infinite")]),e._v(": Value is an infinite number - "),a("strong",[e._v("experimental")])]),e._v(" "),a("li",[a("code",[e._v("is_nan")]),e._v(": Value is not a number")]),e._v(" "),a("li",[a("code",[e._v("is_nodata")]),e._v(": Value is a no-data value")]),e._v(" "),a("li",[a("code",[e._v("is_valid")]),e._v(": Value is valid data")]),e._v(" "),a("li",[a("code",[e._v("lt")]),e._v(": Less than comparison")]),e._v(" "),a("li",[a("code",[e._v("lte")]),e._v(": Less than or equal to comparison")]),e._v(" "),a("li",[a("code",[e._v("neq")]),e._v(": Not equal to comparison")]),e._v(" "),a("li",[a("code",[e._v("not")]),e._v(": Inverting a boolean")]),e._v(" "),a("li",[a("code",[e._v("or")]),e._v(": Logical OR")]),e._v(" "),a("li",[a("code",[e._v("xor")]),e._v(": Logical XOR (exclusive or)")])])])}),[],!1,null,null,null);a.default=o.exports}}]);